generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model agreements {
  id               BigInt                      @id @default(autoincrement()) @db.UnsignedBigInt
  id_student       BigInt                      @db.UnsignedBigInt
  id_project       BigInt                      @db.UnsignedBigInt
  agreement_status agreements_agreement_status
  progress         Int
  created_at       DateTime?                   @db.Timestamp(0)
  updated_at       DateTime?                   @db.Timestamp(0)
  projects         projects                    @relation(fields: [id_project], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "agreements_id_project_foreign")
  students         students                    @relation(fields: [id_student], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "agreements_id_student_foreign")

  @@index([id_project], map: "agreements_id_project_index")
  @@index([id_student], map: "agreements_id_student_index")
}

model announcements {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tittle     String    @db.VarChar(255)
  detail     String    @db.VarChar(255)
  attachment String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model bimbingan {
  id            BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  id_student    BigInt    @db.UnsignedBigInt
  id_lecturer   BigInt    @db.UnsignedBigInt
  ke            String    @db.VarChar(255)
  tanggal       DateTime  @db.Date
  subjek        String    @db.VarChar(255)
  catatan_dosen String    @db.VarChar(255)
  file          String    @db.VarChar(255)
  status        Boolean
  aksi          String    @db.VarChar(255)
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)
  lecturers     lecturers @relation(fields: [id_lecturer], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "bimbingan_id_lecturer_foreign")
  students      students  @relation(fields: [id_student], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "bimbingan_id_student_foreign")

  @@index([id_lecturer], map: "bimbingan_id_lecturer_index")
  @@index([id_student], map: "bimbingan_id_student_index")
}

model reserves {
  id             BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  pic            String      @db.VarChar(255)
  status         book_status @default(process)
  tanggal        DateTime    @db.Date
  session_id     BigInt      @db.UnsignedBigInt
  inventories_id BigInt      @db.UnsignedBigInt
  user_id        BigInt      @db.UnsignedBigInt
  updated_by     BigInt?     @db.UnsignedBigInt
  created_at     DateTime?   @db.Timestamp(0)
  updated_at     DateTime?   @db.Timestamp(0)
  deleted_at     DateTime?   @db.Timestamp(0)

  inventories         inventories   @relation(fields: [inventories_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "reserves_user_foreign")
  reserve_users_updated_by   users?      @relation("reserves_updated_by",fields: [updated_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "reserves_user_update_foreign")
  reserve_user_created               users         @relation("reserves_created_by",fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "reserves_user_id_foreign_key")
  time_sessions       time_sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "reserves_time_session_foreign")
}

model comments {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  id_content BigInt    @db.UnsignedBigInt
  id_user    BigInt    @db.UnsignedBigInt
  comment    String    @db.Text
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  contents   contents  @relation(fields: [id_content], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comments_id_content_foreign")
  users      users     @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comments_id_user_foreign")

  @@index([id_content], map: "comments_id_content_index")
  @@index([id_user], map: "comments_id_user_index")
}

model content_images {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  id_content BigInt   @db.UnsignedBigInt
  image_url  String   @db.VarChar(255)
  contents   contents @relation(fields: [id_content], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "content_images_id_content_foreign")

  @@index([id_content], map: "content_images_id_content_index")
}

model contents {
  id                  BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
  id_proyek           BigInt               @db.UnsignedBigInt
  thumbnail_image_url String               @db.VarChar(255)
  content_url         String?              @db.VarChar(255)
  video_url           String?              @db.VarChar(255)
  video_tittle        String?              @db.VarChar(255)
  github_url          String?              @db.VarChar(255)
  tipe_konten         contents_tipe_konten
  created_at          DateTime?            @db.Timestamp(0)
  updated_at          DateTime?            @db.Timestamp(0)
  comments            comments[]
  content_images      content_images[]
  notifications       notifications[]
  tags                tags[]

  @@index([id_proyek], map: "contents_id_proyek")
}

model carts {
  id                BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id           BigInt    @db.UnsignedBigInt
  invetories_id     BigInt    @db.UnsignedBigInt
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)

  inventories       inventories @relation(fields: [invetories_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "carts_id_inventories_foreign")
  users_cart_toUser users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "carts_id_user_foreign")

  @@index([user_id], map: "carts_id_user_index")
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model inventories {
  id                                  BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  item_name                           String                @db.VarChar(255)
  no_item                             String?               @unique(map: "inventories_no_item_unique") @db.VarChar(255)
  condition                           inventories_condition
  alat_bhp                            inventories_alat_bhp  @map("alat/bhp")
  type                                inventories_usage?
  no_inv_ugm                          String?               @db.VarChar(255)
  information                         String?               @db.Text
  special_session                     Boolean               @default(false)
  room_id                             BigInt?               @db.UnsignedBigInt
  labolatory_id                       BigInt?               @db.UnsignedBigInt
  created_by                          BigInt?               @db.UnsignedBigInt
  updated_by                          BigInt?               @db.UnsignedBigInt
  created_at                          DateTime?             @db.Timestamp(0)
  updated_at                          DateTime?             @db.Timestamp(0)
  deleted_at                          DateTime?             @db.Timestamp(0)
  users_inventories_created_byTousers users?                @relation("inventories_created_byTousers", fields: [created_by], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "inventories_created_by_foreign")
  labolatories                        labolatories?         @relation(fields: [labolatory_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "inventories_labolatory_id_foreign")
  rooms                               rooms?                @relation(fields: [room_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "inventories_room_id_foreign")
  users_inventories_updated_byTousers users?                @relation("inventories_updated_byTousers", fields: [updated_by], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "inventories_updated_by_foreign")
  inventory_galleries                 inventory_galleries[]
  inventory_reserves                  inventory_reserves[]
  inventory_rooms                     inventory_rooms[]
  item_pengadaans                     item_pengadaans[]
  reserves                            reserves[]
  carts                               carts[]

  @@index([created_by], map: "inventories_created_by_foreign")
  @@index([labolatory_id], map: "inventories_labolatory_id_foreign")
  @@index([room_id], map: "inventories_room_id_foreign")
  @@index([updated_by], map: "inventories_updated_by_foreign")
}

model inventory_galleries {
  id           BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  inventory_id BigInt      @db.UnsignedBigInt
  filepath     String      @db.VarChar(255)
  filename     String?     @db.VarChar(255)
  created_at   DateTime?   @db.Timestamp(0)
  updated_at   DateTime?   @db.Timestamp(0)
  deleted_at   DateTime?   @db.Timestamp(0)
  inventories  inventories @relation(fields: [inventory_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "inventory_galleries_inventory_id_foreign")

  @@index([inventory_id], map: "inventory_galleries_inventory_id_foreign")
}

model inventory_reserves {
  id           BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  inventory_id BigInt      @db.UnsignedBigInt
  start_time   DateTime?   @db.Timestamp(0)
  end_time     DateTime?   @db.Timestamp(0)
  identity     String      @db.VarChar(100)
  email        String      @db.VarChar(255)
  is_approved  Boolean     @default(false)
  no_wa        String      @db.VarChar(50)
  needs        String      @db.Text
  created_at   DateTime?   @db.Timestamp(0)
  updated_at   DateTime?   @db.Timestamp(0)
  name         String?     @db.VarChar(255)
  inventories  inventories @relation(fields: [inventory_id], references: [id], onUpdate: Restrict, map: "inventory_reserves_inventory_id_foreign")

  @@index([inventory_id], map: "inventory_reserves_inventory_id_foreign")
}

model inventory_rooms {
  id           BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  room_id      BigInt      @db.UnsignedBigInt
  inventory_id BigInt      @db.UnsignedBigInt
  created_at   DateTime?   @db.Timestamp(0)
  updated_at   DateTime?   @db.Timestamp(0)
  inventories  inventories @relation(fields: [inventory_id], references: [id], onUpdate: Restrict, map: "inventory_rooms_inventory_id_foreign")
  rooms        rooms       @relation(fields: [room_id], references: [id], onUpdate: Restrict, map: "inventory_rooms_room_id_foreign")

  @@index([inventory_id], map: "inventory_rooms_inventory_id_foreign")
  @@index([room_id], map: "inventory_rooms_room_id_foreign")
}

model item_pengadaans {
  id           BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  pengadaan_id BigInt      @db.UnsignedBigInt
  inventory_id BigInt      @db.UnsignedBigInt
  created_at   DateTime?   @db.Timestamp(0)
  updated_at   DateTime?   @db.Timestamp(0)
  inventories  inventories @relation(fields: [inventory_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "item_pengadaans_inventory_id_foreign")
  pengadaans   pengadaans  @relation(fields: [pengadaan_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "item_pengadaans_pengadaan_id_foreign")

  @@index([inventory_id], map: "item_pengadaans_inventory_id_foreign")
  @@index([pengadaan_id], map: "item_pengadaans_pengadaan_id_foreign")
}

model labolatories {
  id          BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  name        String        @db.VarChar(255)
  created_at  DateTime?     @db.Timestamp(0)
  updated_at  DateTime?     @db.Timestamp(0)
  inventories inventories[]
  pengadaans  pengadaans[]
  users       users[]
}

model laboran {
  id         BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  name       String     @db.VarChar(255)
  email      String     @unique(map: "laboran_email_unique") @db.VarChar(255)
  phone      String?    @db.VarChar(255)
  created_at DateTime?  @db.Timestamp(0)
  updated_at DateTime?  @db.Timestamp(0)
  research   research[]
}

model laboratorium_support {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  room_id        BigInt    @db.UnsignedBigInt
  support_type_1 String    @db.VarChar(255)
  support_type_2 String?   @db.VarChar(255)
  support_type_3 String?   @db.VarChar(255)
  support_type_4 String?   @db.VarChar(255)
  description    String?   @db.Text
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)
  rooms          rooms     @relation(fields: [room_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "laboratorium_support_room_id_foreign")

  @@index([room_id], map: "laboratorium_support_room_id_foreign")
}

model lecturers {
  id            BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  id_user       BigInt         @db.UnsignedBigInt
  image_profile String         @db.VarChar(255)
  full_name     String         @db.VarChar(255)
  front_title   String         @db.VarChar(255)
  back_title    String         @db.VarChar(255)
  NID           String         @db.VarChar(255)
  phone_number  String         @db.VarChar(255)
  max_quota     Int
  isKaprodi     Boolean
  created_at    DateTime?      @db.Timestamp(0)
  updated_at    DateTime?      @db.Timestamp(0)
  bimbingan     bimbingan[]
  users         users          @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "lecturers_id_user_foreign")
  pendadaran    pendadaran[]
  projects      projects[]
  specialities  specialities[]
  supervisors   supervisors[]

  @@index([id_user], map: "lecturers_id_user_index")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model notifications {
  id                   BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  id_user              BigInt   @db.UnsignedBigInt
  id_content           BigInt   @db.UnsignedBigInt
  notification_message String   @db.Text
  notification_date    DateTime @db.DateTime(0)
  contents             contents @relation(fields: [id_content], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "notifications_id_content_foreign")
  users                users    @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "notifications_id_user_foreign")

  @@index([id_content], map: "notifications_id_content_index")
  @@index([id_user], map: "notifications_id_user_index")
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model pendadaran {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  id_student     BigInt    @db.UnsignedBigInt
  id_lecturer    BigInt    @db.UnsignedBigInt
  tanggal_sidang DateTime  @db.Date
  jam            DateTime  @db.Time(0)
  ruang          String    @db.VarChar(255)
  nilai          Int
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)
  lecturers      lecturers @relation(fields: [id_lecturer], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "pendadaran_id_lecturer_foreign")
  students       students  @relation(fields: [id_student], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "pendadaran_id_student_foreign")

  @@index([id_lecturer], map: "pendadaran_id_lecturer_index")
  @@index([id_student], map: "pendadaran_id_student_index")
}

model pengadaans {
  id              BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  item_name       String            @db.VarChar(255)
  spesifikasi     String            @db.Text
  jumlah          Int
  harga_item      BigInt
  bulan_pengadaan DateTime          @db.Date
  labolatory_id   BigInt            @db.UnsignedBigInt
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  item_pengadaans item_pengadaans[]
  labolatories    labolatories      @relation(fields: [labolatory_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "pengadaans_labolatory_id_foreign")

  @@index([labolatory_id], map: "pengadaans_labolatory_id_foreign")
}

model periods {
  id             BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  semester       periods_semester
  year           String              @db.VarChar(255)
  description    periods_description
  status         periods_status
  start_date     DateTime            @db.Date
  end_date       DateTime            @db.Date
  tanggal_sidang DateTime            @db.Date
  created_at     DateTime?           @db.Timestamp(0)
  updated_at     DateTime?           @db.Timestamp(0)
  projects       projects[]
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model projects {
  id          BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  id_lecturer BigInt       @db.UnsignedBigInt
  id_period   BigInt       @db.UnsignedBigInt
  tittle      String       @db.VarChar(255)
  agency      String       @db.VarChar(255)
  description String       @db.VarChar(255)
  tools       String       @db.VarChar(255)
  status      Boolean
  created_at  DateTime?    @db.Timestamp(0)
  updated_at  DateTime?    @db.Timestamp(0)
  agreements  agreements[]
  lecturers   lecturers    @relation(fields: [id_lecturer], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "projects_id_lecturer_foreign")
  periods     periods      @relation(fields: [id_period], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "projects_id_period_foreign")

  @@index([id_lecturer], map: "projects_id_lecturer_index")
  @@index([id_period], map: "projects_id_period_index")
}

model research {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  title       String    @db.VarChar(255)
  description String?   @db.Text
  laboran_id  BigInt    @db.UnsignedBigInt
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  laboran     laboran   @relation(fields: [laboran_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "research_laboran_id_foreign")

  @@index([laboran_id], map: "research_laboran_id_foreign")
}

model reserve_rules {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  rule       String    @db.Text
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model room_reserves {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  room_id     BigInt?   @db.UnsignedBigInt
  start_time  DateTime? @db.Timestamp(0)
  end_time    DateTime? @db.Timestamp(0)
  identity    String?   @db.VarChar(100)
  email       String?   @db.VarChar(255)
  is_approved Boolean   @default(false)
  no_wa       String?   @db.VarChar(50)
  needs       String?   @db.Text
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  name        String?   @db.VarChar(255)
  rooms       rooms?    @relation(fields: [room_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "room_reserves_room_id_foreign")

  @@index([room_id], map: "room_reserves_room_id_foreign")
}

model rooms {
  id                   BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  name                 String                 @db.VarChar(255)
  capacity             Int?
  type                 rooms_type
  description          String?                @db.Text
  foto_laboratorium    String?                @db.VarChar(255)
  created_at           DateTime?              @db.Timestamp(0)
  updated_at           DateTime?              @db.Timestamp(0)
  inventories          inventories[]
  inventory_rooms      inventory_rooms[]
  laboratorium_support laboratorium_support[]
  room_reserves        room_reserves[]
  schedules            schedules[]
}

model schedules {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  room_id     BigInt    @db.UnsignedBigInt
  subject_id  BigInt    @db.UnsignedBigInt
  start_time  DateTime? @db.Timestamp(0)
  end_time    DateTime? @db.Timestamp(0)
  dosen       String    @db.VarChar(255)
  information String    @db.Text
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  rooms       rooms     @relation(fields: [room_id], references: [id], onUpdate: Restrict, map: "schedules_room_id_foreign")
  subjects    subjects  @relation(fields: [subject_id], references: [id], onUpdate: Restrict, map: "schedules_subject_id_foreign")

  @@index([room_id], map: "schedules_room_id_foreign")
  @@index([subject_id], map: "schedules_subject_id_foreign")
}

model sessions {
  id            String  @id @db.VarChar(255)
  user_id       BigInt? @db.UnsignedBigInt
  ip_address    String? @db.VarChar(45)
  user_agent    String? @db.Text
  payload       String  @db.LongText
  last_activity Int

  @@index([last_activity], map: "sessions_last_activity_index")
  @@index([user_id], map: "sessions_user_id_index")
}

model specialities {
  id          BigInt           @id @default(autoincrement()) @db.UnsignedBigInt
  id_lecturer BigInt           @db.UnsignedBigInt
  tag         specialities_tag
  lecturers   lecturers        @relation(fields: [id_lecturer], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "specialities_id_lecturer_foreign")

  @@index([id_lecturer], map: "specialities_id_lecturer_index")
}

model statistics {
  id           BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  id_user      BigInt   @db.UnsignedBigInt
  page_visited String   @db.VarChar(255)
  visit_date   DateTime @default(now()) @db.Timestamp(0)
  users        users    @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "statistics_id_user_foreign")

  @@index([id_user], map: "statistics_id_user_index")
}

model students {
  id           BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  id_user      BigInt        @db.UnsignedBigInt
  NIM          String        @db.VarChar(255)
  semester     String        @db.VarChar(255)
  IPK          Int
  SKS          Int
  phone_number String        @db.VarChar(255)
  skill        String        @db.VarChar(255)
  experience   String        @db.VarChar(255)
  created_at   DateTime?     @db.Timestamp(0)
  updated_at   DateTime?     @db.Timestamp(0)
  agreements   agreements[]
  bimbingan    bimbingan[]
  pendadaran   pendadaran[]
  users        users         @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "students_id_user_foreign")
  supervisors  supervisors[]

  @@index([id_user], map: "students_id_user_index")
}

model subjects {
  id           BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  subject_name String      @db.VarChar(255)
  lecturer     String      @db.VarChar(255)
  created_at   DateTime?   @db.Timestamp(0)
  updated_at   DateTime?   @db.Timestamp(0)
  schedules    schedules[]
}

model supervisors {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  id_student  BigInt    @db.UnsignedBigInt
  id_lecturer BigInt    @db.UnsignedBigInt
  lecturers   lecturers @relation(fields: [id_lecturer], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "supervisors_id_lecturer_foreign")
  students    students  @relation(fields: [id_student], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "supervisors_id_student_foreign")

  @@index([id_lecturer], map: "supervisors_id_lecturer_index")
  @@index([id_student], map: "supervisors_id_student_index")
}

model tags {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  id_content BigInt   @db.UnsignedBigInt
  tag        tags_tag
  contents   contents @relation(fields: [id_content], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "tags_id_content_foreign")

  @@index([id_content], map: "tags_id_content_index")
}

model time_sessions {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  special_session Boolean @default(false)
  start      DateTime  @db.Time()
  end        DateTime  @db.Time()
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)

  reserves reserves[]
}

model users {
  id                                        BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  username                                  String             @db.VarChar(255)
  first_name                                String?            @db.VarChar(255)
  last_name                                 String?            @db.VarChar(255)
  email                                     String             @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at                         DateTime?          @db.Timestamp(0)
  password                                  String?            @db.VarChar(255)
  nim                                       String?            @db.VarChar(255)
  prodi                                     String?            @db.VarChar(255)
  img_url                                   String?            @db.VarChar(255)
  role                                      users_role?        @default(umum)
  login_status                              users_login_status @default(off)
  last_login                                DateTime?          @db.Timestamp(0)
  remember_token                            String?            @db.VarChar(100)
  created_at                                DateTime?          @db.Timestamp(0)
  updated_at                                DateTime?          @db.Timestamp(0)
  lab_id                                    BigInt?            @db.UnsignedBigInt
  comments                                  comments[]
  carts                                     carts[]
  inventories_inventories_created_byTousers inventories[]      @relation("inventories_created_byTousers")
  inventories_inventories_updated_byTousers inventories[]      @relation("inventories_updated_byTousers")
  lecturers                                 lecturers[]
  notifications                             notifications[]
  statistics                                statistics[]
  students                                  students[]
  reserves_created_by                       reserves[] @relation("reserves_created_by")
  reserves_updated_by                       reserves[] @relation("reserves_updated_by")

  labolatories labolatories? @relation(fields: [lab_id], references: [id], onUpdate: Restrict, map: "users_lab_id_foreign")

  @@index([lab_id], map: "users_lab_id_foreign")
}

enum periods_semester {
  Genap
  Ganjil
}

enum specialities_tag {
  Software_Engineering                                    @map("Software Engineering")
  Intelligent_Gaming                                      @map("Intelligent Gaming")
  Data_Science                                            @map("Data Science")
  System_Security_and_Cybersecurity                       @map("System Security and Cybersecurity")
  Mobile_and_Responsive_App_Development                   @map("Mobile and Responsive App Development")
  Blockchain_Technology_and_Digital_Finance               @map("Blockchain Technology and Digital Finance")
  Artificial_Intelligence_and_Natural_Language_Processing @map("Artificial Intelligence and Natural Language Processing")
  IoT
}

enum tags_tag {
  Software_Engineering                                    @map("Software Engineering")
  Intelligent_Gaming                                      @map("Intelligent Gaming")
  Data_Science                                            @map("Data Science")
  System_Security_and_Cybersecurity                       @map("System Security and Cybersecurity")
  Mobile_and_Responsive_App_Development                   @map("Mobile and Responsive App Development")
  Blockchain_Technology_and_Digital_Finance               @map("Blockchain Technology and Digital Finance")
  Artificial_Intelligence_and_Natural_Language_Processing @map("Artificial Intelligence and Natural Language Processing")
  IoT
}

enum agreements_agreement_status {
  Revisi
  Proses
  Terplotting_Bimbingan @map("Terplotting Bimbingan")
}

enum inventories_condition {
  good
  bad
}

enum periods_description {
  Tugas_Akhir @map("Tugas Akhir")
  Yudisium
}

enum rooms_type {
  gudang
  laboratorium
}

enum inventories_alat_bhp {
  alat
  bhp

  @@map("inventories_alat/bhp")
}

enum periods_status {
  Aktif
  Tidak_Aktif @map("Tidak Aktif")
}

enum book_status {
  process
  approve
  rejected
  canceled
  waiting_to_be_return @map("Waiting to be return")
  done
}

enum contents_tipe_konten {
  jurnal
  tugas_akhir @map("tugas akhir")
}

enum users_role {
  admin
  dosen
  umum
  kaleb
  laboran
}

enum users_login_status {
  on
  off
}

enum inventories_usage {
  praktikum
  projek
}
